Adresa		/OU=Tommy,OU=Interni,OU=Kontakti,DC=tommy
======================================================================================

Pretraga samo prema imenu (AD)
======================================================================================

      try
        {
            DirectoryEntry ldap = createNewEntry();

            DirectorySearcher srch = new DirectorySearcher(ldap);
            SearchResult res;
            string userName = korisnickoIme.Text;

            srch.Filter = "(CN=" + userName + ")";
            res = srch.FindOne();
           

            if (res != null)
            {
                Label2.Text = "Postoji";

                
                ResultPropertyCollection polja = res.Properties;
                foreach (string lpf in polja.PropertyNames)
                {
                    foreach (Object ob in polja[lpf])
                    { Label2.Text += lpf + ": " + ob.ToString() + "<br>"; }
                }
            }

            else
            {
                Label2.Text = "Nepostojeći korisnik";
                
            }
        }
        
        catch (Exception ex) { Label2.Text = ex.Message; }


Vađenje podataka iz baze
======================================================================================   
       
        LOG IN PREMA KORISNIČKOM IMENU

        > Stvaramo novu SQL vezu sa bazom podataka (prema ConnectionStringu)
        > Nova komanda gdje trazimo korisnika prema korisnickom imenu unesenom u inputu
        > Dodajemo vrijednost iz inputa u parametar korisnickog imena
        > Sql adapter se koristi na isti nacin kao i onaj u DataSet objektu - parametar naredba cmd
        > Stvaramo DataTable objekt i pomocu adaptera ga punimo
        > Otvaramo vezu, izvrsavamo naredbu, zatvaramo vezu
        > Ako je broj vracenih redova veci od 0 korisnika prebacivamo na pocetnu
        > Ukoliko nije, vracamo poruku
         
         

        Label2.Text = "";
        SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["logIn"].ConnectionString);
        SqlCommand cmd = new SqlCommand("SELECT * FROM Korisnik WHERE KorisnickoIme=@korisnickoIme", con);
        cmd.Parameters.AddWithValue("@korisnickoIme", korisnickoIme.Text);
        SqlDataAdapter sda = new SqlDataAdapter(cmd);
        DataTable dt = new DataTable();
        sda.Fill(dt);
        con.Open();
        int i = cmd.ExecuteNonQuery();
        con.Close();

        if (dt.Rows.Count > 0)
        {
            Response.Redirect("Pocetna.aspx");
        }
        else
        {

            Label2.Text = "Nepostojeći korisnik - ukoliko zelite unijeti novog korisnika, kliknite \"Registracija\".";
        }

        */
     

CREATE PROCEDURE [dbo].[DataStorageUser]
	@KorisnickoIme nvarchar(150),
	@Ime nvarchar(50),
	@Prezime nvarchar(70),
	@EmailAdresa nvarchar(255),
	@Titula nvarchar(150),
	@Razina int

AS
	BEGIN tran
		INSERT INTO Korisnik(IDRazina)
			SELECT r.RazinaID 
			FROM Razina r 
			WHERE r.NazivRazine = @Razina

		INSERT INTO Korisnik(KorisnickoIme, Ime, Prezime, EmailAdresa, Titula, IDRazina) VALUES (@KorisnickoIme, @Ime, @Prezime, @EmailAdresa, @Titula)
			IF @@ERROR<>0
				BEGIN
					ROLLBACK tran
					RETURN -1
				END
			ELSE

COMMIT tran



                Za unos u tablicu korisnika
                Label2.Text = res.SamAccountName + ", " + res.DisplayName + ", " + res.EmailAddress + ", "
                    + res.Description + ", " + res.VoiceTelephoneNumber + ", " + res.DistinguishedName;
                    
                Za unos u razine?
                res.DistinguishedName; 
                
                Koristiti proceduru za spremanje u bazu, napraviti stored procedure i izvest spremanje u localstorage i vidit
                sta sa onim govnom od IE-a      ... nista i dalje ne funkcionira

                Kod storage procedure pogledati kako se sprema parametar za druge tablice (?)
                                                
                 */


				 <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.7.2/angular.min.js"></script>
    <script src="angularjs/session.js"></script>


	
    static DirectoryEntry createNewEntry()
    {
        DirectoryEntry ldap = new DirectoryEntry();
        ldap.Path = "LDAP://192.168.252.4";
        ldap.Username = "sso.apprezervacije";
        ldap.Password = "Nak0nN0ciD0laziDan";
        ldap.AuthenticationType = AuthenticationTypes.Secure;

        return ldap;
    }

	SELECT DvoranaID, Lokacija, Adresa, NazivDvorane FROM Dvorana
	WHERE DvoranaID NOT IN (SELECT IDDvorana FROM Rezervacija WHERE (PeriodOd = @PeriodOd || PeriodDo = @PeriodDo))

	cmd.Parameters.AddWithValue("@PeriodOd", timestampBegin);
        cmd.Parameters.AddWithValue("@PeriodDo", timestampEnd);


		/*
 List<Participant> userInvitations = new List<Participant>();
        foreach (string u in users)
        {
            string sqlQuery = @"SELECT PeriodOd, PeriodDo, d.Lokacija, d.Adresa, d.NazivDvorane
                                FROM Rezervacija r, Dvorana
                                INNER JOIN Dvorana d ON r.IDDvorana = d.DvoranaID
                                WHERE r.RezervacijaID = @IDRez";

            string CS = ConfigurationManager.ConnectionStrings["Rezervacija"].ConnectionString;            
            using (SqlConnection con = new SqlConnection(CS))
            {
                SqlCommand cmd = new SqlCommand(sqlQuery, con);
                cmd.CommandType = CommandType.Text;
                cmd.Parameters.AddWithValue("@IDRez", reservationID);
                con.Open();
                SqlDataReader rdr = cmd.ExecuteReader();

                while (rdr.Read())
                {
                    Participant ps = new Participant();
                    ps.userName = u;
                    ps.beginPeriod = rdr["PeriodOd"].ToString();
                    ps.endPeriod = rdr["PeriodDo"].ToString();
                    ps.location = rdr["d.Lokacija"].ToString();
                    ps.address = rdr["d.Adresa"].ToString();
                    ps.hallName = rdr["d.NazivDvorane"].ToString();
                    userInvitations.Add(ps);
                }
            }
        }
        

        JavaScriptSerializer js = new JavaScriptSerializer();
        Context.Response.Write(js.Serialize(userInvitations));
    }


    List<Participant> userInvitations = new List<Participant>();

        string sqlQuery = @"SELECT PeriodOd, PeriodDo, d.Lokacija, d.Adresa, d.NazivDvorane
                            FROM Rezervacija r, Dvorana d
                            WHERE r.RezervacijaID = @IDRez AND r.IDDvorana = d.DvoranaID";                          ;
                              

        string CS = ConfigurationManager.ConnectionStrings["Rezervacija"].ConnectionString;
        using (SqlConnection con = new SqlConnection(CS))
        {
            SqlCommand cmd = new SqlCommand(sqlQuery, con);
            cmd.CommandType = CommandType.Text;
            cmd.Parameters.AddWithValue("@IDRez", reservationID);
            con.Open();
            SqlDataReader rdr = cmd.ExecuteReader();

            while (rdr.Read())
            {
                Participant ps = new Participant();
                ps.userName = user;
                ps.beginPeriod = rdr["PeriodOd"].ToString();
                ps.endPeriod = rdr["PeriodDo"].ToString();
                ps.location = rdr["Lokacija"].ToString();
                ps.address = rdr["Adresa"].ToString();
                ps.hallName = rdr["NazivDvorane"].ToString();
                userInvitations.Add(ps);
            }
        }


        JavaScriptSerializer js = new JavaScriptSerializer();
        Context.Response.Write(js.Serialize(userInvitations));
    }
     
     */
